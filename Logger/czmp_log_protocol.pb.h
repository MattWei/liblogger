// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: czmp_log_protocol.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_czmp_5flog_5fprotocol_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_czmp_5flog_5fprotocol_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_czmp_5flog_5fprotocol_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_czmp_5flog_5fprotocol_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_czmp_5flog_5fprotocol_2eproto;
class LogDetail;
class LogDetailDefaultTypeInternal;
extern LogDetailDefaultTypeInternal _LogDetail_default_instance_;
class LogGetterParams;
class LogGetterParamsDefaultTypeInternal;
extern LogGetterParamsDefaultTypeInternal _LogGetterParams_default_instance_;
class LogVector;
class LogVectorDefaultTypeInternal;
extern LogVectorDefaultTypeInternal _LogVector_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::LogDetail* Arena::CreateMaybeMessage<::LogDetail>(Arena*);
template<> ::LogGetterParams* Arena::CreateMaybeMessage<::LogGetterParams>(Arena*);
template<> ::LogVector* Arena::CreateMaybeMessage<::LogVector>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class LogGetterParams :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogGetterParams) */ {
 public:
  LogGetterParams();
  virtual ~LogGetterParams();

  LogGetterParams(const LogGetterParams& from);
  LogGetterParams(LogGetterParams&& from) noexcept
    : LogGetterParams() {
    *this = ::std::move(from);
  }

  inline LogGetterParams& operator=(const LogGetterParams& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogGetterParams& operator=(LogGetterParams&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogGetterParams& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogGetterParams* internal_default_instance() {
    return reinterpret_cast<const LogGetterParams*>(
               &_LogGetterParams_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LogGetterParams& a, LogGetterParams& b) {
    a.Swap(&b);
  }
  inline void Swap(LogGetterParams* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogGetterParams* New() const final {
    return CreateMaybeMessage<LogGetterParams>(nullptr);
  }

  LogGetterParams* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogGetterParams>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogGetterParams& from);
  void MergeFrom(const LogGetterParams& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogGetterParams* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogGetterParams";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_czmp_5flog_5fprotocol_2eproto);
    return ::descriptor_table_czmp_5flog_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateStartFieldNumber = 2,
    kDateEndFieldNumber = 3,
    kFliterFieldNumber = 5,
    kStartLevelFieldNumber = 1,
    kMaxRowsFieldNumber = 4,
  };
  // string dateStart = 2;
  void clear_datestart();
  const std::string& datestart() const;
  void set_datestart(const std::string& value);
  void set_datestart(std::string&& value);
  void set_datestart(const char* value);
  void set_datestart(const char* value, size_t size);
  std::string* mutable_datestart();
  std::string* release_datestart();
  void set_allocated_datestart(std::string* datestart);
  private:
  const std::string& _internal_datestart() const;
  void _internal_set_datestart(const std::string& value);
  std::string* _internal_mutable_datestart();
  public:

  // string dateEnd = 3;
  void clear_dateend();
  const std::string& dateend() const;
  void set_dateend(const std::string& value);
  void set_dateend(std::string&& value);
  void set_dateend(const char* value);
  void set_dateend(const char* value, size_t size);
  std::string* mutable_dateend();
  std::string* release_dateend();
  void set_allocated_dateend(std::string* dateend);
  private:
  const std::string& _internal_dateend() const;
  void _internal_set_dateend(const std::string& value);
  std::string* _internal_mutable_dateend();
  public:

  // bytes fliter = 5;
  void clear_fliter();
  const std::string& fliter() const;
  void set_fliter(const std::string& value);
  void set_fliter(std::string&& value);
  void set_fliter(const char* value);
  void set_fliter(const void* value, size_t size);
  std::string* mutable_fliter();
  std::string* release_fliter();
  void set_allocated_fliter(std::string* fliter);
  private:
  const std::string& _internal_fliter() const;
  void _internal_set_fliter(const std::string& value);
  std::string* _internal_mutable_fliter();
  public:

  // uint32 startLevel = 1;
  void clear_startlevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 startlevel() const;
  void set_startlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_startlevel() const;
  void _internal_set_startlevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 maxRows = 4;
  void clear_maxrows();
  ::PROTOBUF_NAMESPACE_ID::uint32 maxrows() const;
  void set_maxrows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_maxrows() const;
  void _internal_set_maxrows(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogGetterParams)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datestart_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dateend_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr fliter_;
  ::PROTOBUF_NAMESPACE_ID::uint32 startlevel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 maxrows_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_czmp_5flog_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LogDetail :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogDetail) */ {
 public:
  LogDetail();
  virtual ~LogDetail();

  LogDetail(const LogDetail& from);
  LogDetail(LogDetail&& from) noexcept
    : LogDetail() {
    *this = ::std::move(from);
  }

  inline LogDetail& operator=(const LogDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogDetail& operator=(LogDetail&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogDetail& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogDetail* internal_default_instance() {
    return reinterpret_cast<const LogDetail*>(
               &_LogDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LogDetail& a, LogDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(LogDetail* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogDetail* New() const final {
    return CreateMaybeMessage<LogDetail>(nullptr);
  }

  LogDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogDetail& from);
  void MergeFrom(const LogDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogDetail";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_czmp_5flog_5fprotocol_2eproto);
    return ::descriptor_table_czmp_5flog_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogTimeFieldNumber = 1,
    kLogModuleFieldNumber = 3,
    kLogMsgFieldNumber = 4,
    kLogDataFieldNumber = 5,
    kLogLevelFieldNumber = 2,
  };
  // string logTime = 1;
  void clear_logtime();
  const std::string& logtime() const;
  void set_logtime(const std::string& value);
  void set_logtime(std::string&& value);
  void set_logtime(const char* value);
  void set_logtime(const char* value, size_t size);
  std::string* mutable_logtime();
  std::string* release_logtime();
  void set_allocated_logtime(std::string* logtime);
  private:
  const std::string& _internal_logtime() const;
  void _internal_set_logtime(const std::string& value);
  std::string* _internal_mutable_logtime();
  public:

  // string logModule = 3;
  void clear_logmodule();
  const std::string& logmodule() const;
  void set_logmodule(const std::string& value);
  void set_logmodule(std::string&& value);
  void set_logmodule(const char* value);
  void set_logmodule(const char* value, size_t size);
  std::string* mutable_logmodule();
  std::string* release_logmodule();
  void set_allocated_logmodule(std::string* logmodule);
  private:
  const std::string& _internal_logmodule() const;
  void _internal_set_logmodule(const std::string& value);
  std::string* _internal_mutable_logmodule();
  public:

  // bytes logMsg = 4;
  void clear_logmsg();
  const std::string& logmsg() const;
  void set_logmsg(const std::string& value);
  void set_logmsg(std::string&& value);
  void set_logmsg(const char* value);
  void set_logmsg(const void* value, size_t size);
  std::string* mutable_logmsg();
  std::string* release_logmsg();
  void set_allocated_logmsg(std::string* logmsg);
  private:
  const std::string& _internal_logmsg() const;
  void _internal_set_logmsg(const std::string& value);
  std::string* _internal_mutable_logmsg();
  public:

  // string logData = 5;
  void clear_logdata();
  const std::string& logdata() const;
  void set_logdata(const std::string& value);
  void set_logdata(std::string&& value);
  void set_logdata(const char* value);
  void set_logdata(const char* value, size_t size);
  std::string* mutable_logdata();
  std::string* release_logdata();
  void set_allocated_logdata(std::string* logdata);
  private:
  const std::string& _internal_logdata() const;
  void _internal_set_logdata(const std::string& value);
  std::string* _internal_mutable_logdata();
  public:

  // uint32 logLevel = 2;
  void clear_loglevel();
  ::PROTOBUF_NAMESPACE_ID::uint32 loglevel() const;
  void set_loglevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loglevel() const;
  void _internal_set_loglevel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:LogDetail)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logtime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logmodule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logmsg_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logdata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loglevel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_czmp_5flog_5fprotocol_2eproto;
};
// -------------------------------------------------------------------

class LogVector :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LogVector) */ {
 public:
  LogVector();
  virtual ~LogVector();

  LogVector(const LogVector& from);
  LogVector(LogVector&& from) noexcept
    : LogVector() {
    *this = ::std::move(from);
  }

  inline LogVector& operator=(const LogVector& from) {
    CopyFrom(from);
    return *this;
  }
  inline LogVector& operator=(LogVector&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LogVector& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LogVector* internal_default_instance() {
    return reinterpret_cast<const LogVector*>(
               &_LogVector_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(LogVector& a, LogVector& b) {
    a.Swap(&b);
  }
  inline void Swap(LogVector* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LogVector* New() const final {
    return CreateMaybeMessage<LogVector>(nullptr);
  }

  LogVector* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LogVector>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LogVector& from);
  void MergeFrom(const LogVector& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LogVector* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LogVector";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_czmp_5flog_5fprotocol_2eproto);
    return ::descriptor_table_czmp_5flog_5fprotocol_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLogFieldNumber = 1,
  };
  // repeated .LogDetail log = 1;
  int log_size() const;
  private:
  int _internal_log_size() const;
  public:
  void clear_log();
  ::LogDetail* mutable_log(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogDetail >*
      mutable_log();
  private:
  const ::LogDetail& _internal_log(int index) const;
  ::LogDetail* _internal_add_log();
  public:
  const ::LogDetail& log(int index) const;
  ::LogDetail* add_log();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogDetail >&
      log() const;

  // @@protoc_insertion_point(class_scope:LogVector)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogDetail > log_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_czmp_5flog_5fprotocol_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LogGetterParams

// uint32 startLevel = 1;
inline void LogGetterParams::clear_startlevel() {
  startlevel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogGetterParams::_internal_startlevel() const {
  return startlevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogGetterParams::startlevel() const {
  // @@protoc_insertion_point(field_get:LogGetterParams.startLevel)
  return _internal_startlevel();
}
inline void LogGetterParams::_internal_set_startlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  startlevel_ = value;
}
inline void LogGetterParams::set_startlevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_startlevel(value);
  // @@protoc_insertion_point(field_set:LogGetterParams.startLevel)
}

// string dateStart = 2;
inline void LogGetterParams::clear_datestart() {
  datestart_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogGetterParams::datestart() const {
  // @@protoc_insertion_point(field_get:LogGetterParams.dateStart)
  return _internal_datestart();
}
inline void LogGetterParams::set_datestart(const std::string& value) {
  _internal_set_datestart(value);
  // @@protoc_insertion_point(field_set:LogGetterParams.dateStart)
}
inline std::string* LogGetterParams::mutable_datestart() {
  // @@protoc_insertion_point(field_mutable:LogGetterParams.dateStart)
  return _internal_mutable_datestart();
}
inline const std::string& LogGetterParams::_internal_datestart() const {
  return datestart_.GetNoArena();
}
inline void LogGetterParams::_internal_set_datestart(const std::string& value) {
  
  datestart_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogGetterParams::set_datestart(std::string&& value) {
  
  datestart_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogGetterParams.dateStart)
}
inline void LogGetterParams::set_datestart(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  datestart_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogGetterParams.dateStart)
}
inline void LogGetterParams::set_datestart(const char* value, size_t size) {
  
  datestart_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogGetterParams.dateStart)
}
inline std::string* LogGetterParams::_internal_mutable_datestart() {
  
  return datestart_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogGetterParams::release_datestart() {
  // @@protoc_insertion_point(field_release:LogGetterParams.dateStart)
  
  return datestart_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogGetterParams::set_allocated_datestart(std::string* datestart) {
  if (datestart != nullptr) {
    
  } else {
    
  }
  datestart_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datestart);
  // @@protoc_insertion_point(field_set_allocated:LogGetterParams.dateStart)
}

// string dateEnd = 3;
inline void LogGetterParams::clear_dateend() {
  dateend_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogGetterParams::dateend() const {
  // @@protoc_insertion_point(field_get:LogGetterParams.dateEnd)
  return _internal_dateend();
}
inline void LogGetterParams::set_dateend(const std::string& value) {
  _internal_set_dateend(value);
  // @@protoc_insertion_point(field_set:LogGetterParams.dateEnd)
}
inline std::string* LogGetterParams::mutable_dateend() {
  // @@protoc_insertion_point(field_mutable:LogGetterParams.dateEnd)
  return _internal_mutable_dateend();
}
inline const std::string& LogGetterParams::_internal_dateend() const {
  return dateend_.GetNoArena();
}
inline void LogGetterParams::_internal_set_dateend(const std::string& value) {
  
  dateend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogGetterParams::set_dateend(std::string&& value) {
  
  dateend_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogGetterParams.dateEnd)
}
inline void LogGetterParams::set_dateend(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dateend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogGetterParams.dateEnd)
}
inline void LogGetterParams::set_dateend(const char* value, size_t size) {
  
  dateend_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogGetterParams.dateEnd)
}
inline std::string* LogGetterParams::_internal_mutable_dateend() {
  
  return dateend_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogGetterParams::release_dateend() {
  // @@protoc_insertion_point(field_release:LogGetterParams.dateEnd)
  
  return dateend_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogGetterParams::set_allocated_dateend(std::string* dateend) {
  if (dateend != nullptr) {
    
  } else {
    
  }
  dateend_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dateend);
  // @@protoc_insertion_point(field_set_allocated:LogGetterParams.dateEnd)
}

// uint32 maxRows = 4;
inline void LogGetterParams::clear_maxrows() {
  maxrows_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogGetterParams::_internal_maxrows() const {
  return maxrows_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogGetterParams::maxrows() const {
  // @@protoc_insertion_point(field_get:LogGetterParams.maxRows)
  return _internal_maxrows();
}
inline void LogGetterParams::_internal_set_maxrows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  maxrows_ = value;
}
inline void LogGetterParams::set_maxrows(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_maxrows(value);
  // @@protoc_insertion_point(field_set:LogGetterParams.maxRows)
}

// bytes fliter = 5;
inline void LogGetterParams::clear_fliter() {
  fliter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogGetterParams::fliter() const {
  // @@protoc_insertion_point(field_get:LogGetterParams.fliter)
  return _internal_fliter();
}
inline void LogGetterParams::set_fliter(const std::string& value) {
  _internal_set_fliter(value);
  // @@protoc_insertion_point(field_set:LogGetterParams.fliter)
}
inline std::string* LogGetterParams::mutable_fliter() {
  // @@protoc_insertion_point(field_mutable:LogGetterParams.fliter)
  return _internal_mutable_fliter();
}
inline const std::string& LogGetterParams::_internal_fliter() const {
  return fliter_.GetNoArena();
}
inline void LogGetterParams::_internal_set_fliter(const std::string& value) {
  
  fliter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogGetterParams::set_fliter(std::string&& value) {
  
  fliter_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogGetterParams.fliter)
}
inline void LogGetterParams::set_fliter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  fliter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogGetterParams.fliter)
}
inline void LogGetterParams::set_fliter(const void* value, size_t size) {
  
  fliter_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogGetterParams.fliter)
}
inline std::string* LogGetterParams::_internal_mutable_fliter() {
  
  return fliter_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogGetterParams::release_fliter() {
  // @@protoc_insertion_point(field_release:LogGetterParams.fliter)
  
  return fliter_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogGetterParams::set_allocated_fliter(std::string* fliter) {
  if (fliter != nullptr) {
    
  } else {
    
  }
  fliter_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), fliter);
  // @@protoc_insertion_point(field_set_allocated:LogGetterParams.fliter)
}

// -------------------------------------------------------------------

// LogDetail

// string logTime = 1;
inline void LogDetail::clear_logtime() {
  logtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogDetail::logtime() const {
  // @@protoc_insertion_point(field_get:LogDetail.logTime)
  return _internal_logtime();
}
inline void LogDetail::set_logtime(const std::string& value) {
  _internal_set_logtime(value);
  // @@protoc_insertion_point(field_set:LogDetail.logTime)
}
inline std::string* LogDetail::mutable_logtime() {
  // @@protoc_insertion_point(field_mutable:LogDetail.logTime)
  return _internal_mutable_logtime();
}
inline const std::string& LogDetail::_internal_logtime() const {
  return logtime_.GetNoArena();
}
inline void LogDetail::_internal_set_logtime(const std::string& value) {
  
  logtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogDetail::set_logtime(std::string&& value) {
  
  logtime_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogDetail.logTime)
}
inline void LogDetail::set_logtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogDetail.logTime)
}
inline void LogDetail::set_logtime(const char* value, size_t size) {
  
  logtime_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogDetail.logTime)
}
inline std::string* LogDetail::_internal_mutable_logtime() {
  
  return logtime_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogDetail::release_logtime() {
  // @@protoc_insertion_point(field_release:LogDetail.logTime)
  
  return logtime_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogDetail::set_allocated_logtime(std::string* logtime) {
  if (logtime != nullptr) {
    
  } else {
    
  }
  logtime_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logtime);
  // @@protoc_insertion_point(field_set_allocated:LogDetail.logTime)
}

// uint32 logLevel = 2;
inline void LogDetail::clear_loglevel() {
  loglevel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogDetail::_internal_loglevel() const {
  return loglevel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 LogDetail::loglevel() const {
  // @@protoc_insertion_point(field_get:LogDetail.logLevel)
  return _internal_loglevel();
}
inline void LogDetail::_internal_set_loglevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  loglevel_ = value;
}
inline void LogDetail::set_loglevel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loglevel(value);
  // @@protoc_insertion_point(field_set:LogDetail.logLevel)
}

// string logModule = 3;
inline void LogDetail::clear_logmodule() {
  logmodule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogDetail::logmodule() const {
  // @@protoc_insertion_point(field_get:LogDetail.logModule)
  return _internal_logmodule();
}
inline void LogDetail::set_logmodule(const std::string& value) {
  _internal_set_logmodule(value);
  // @@protoc_insertion_point(field_set:LogDetail.logModule)
}
inline std::string* LogDetail::mutable_logmodule() {
  // @@protoc_insertion_point(field_mutable:LogDetail.logModule)
  return _internal_mutable_logmodule();
}
inline const std::string& LogDetail::_internal_logmodule() const {
  return logmodule_.GetNoArena();
}
inline void LogDetail::_internal_set_logmodule(const std::string& value) {
  
  logmodule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogDetail::set_logmodule(std::string&& value) {
  
  logmodule_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogDetail.logModule)
}
inline void LogDetail::set_logmodule(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logmodule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogDetail.logModule)
}
inline void LogDetail::set_logmodule(const char* value, size_t size) {
  
  logmodule_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogDetail.logModule)
}
inline std::string* LogDetail::_internal_mutable_logmodule() {
  
  return logmodule_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogDetail::release_logmodule() {
  // @@protoc_insertion_point(field_release:LogDetail.logModule)
  
  return logmodule_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogDetail::set_allocated_logmodule(std::string* logmodule) {
  if (logmodule != nullptr) {
    
  } else {
    
  }
  logmodule_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logmodule);
  // @@protoc_insertion_point(field_set_allocated:LogDetail.logModule)
}

// bytes logMsg = 4;
inline void LogDetail::clear_logmsg() {
  logmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogDetail::logmsg() const {
  // @@protoc_insertion_point(field_get:LogDetail.logMsg)
  return _internal_logmsg();
}
inline void LogDetail::set_logmsg(const std::string& value) {
  _internal_set_logmsg(value);
  // @@protoc_insertion_point(field_set:LogDetail.logMsg)
}
inline std::string* LogDetail::mutable_logmsg() {
  // @@protoc_insertion_point(field_mutable:LogDetail.logMsg)
  return _internal_mutable_logmsg();
}
inline const std::string& LogDetail::_internal_logmsg() const {
  return logmsg_.GetNoArena();
}
inline void LogDetail::_internal_set_logmsg(const std::string& value) {
  
  logmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogDetail::set_logmsg(std::string&& value) {
  
  logmsg_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogDetail.logMsg)
}
inline void LogDetail::set_logmsg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogDetail.logMsg)
}
inline void LogDetail::set_logmsg(const void* value, size_t size) {
  
  logmsg_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogDetail.logMsg)
}
inline std::string* LogDetail::_internal_mutable_logmsg() {
  
  return logmsg_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogDetail::release_logmsg() {
  // @@protoc_insertion_point(field_release:LogDetail.logMsg)
  
  return logmsg_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogDetail::set_allocated_logmsg(std::string* logmsg) {
  if (logmsg != nullptr) {
    
  } else {
    
  }
  logmsg_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logmsg);
  // @@protoc_insertion_point(field_set_allocated:LogDetail.logMsg)
}

// string logData = 5;
inline void LogDetail::clear_logdata() {
  logdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LogDetail::logdata() const {
  // @@protoc_insertion_point(field_get:LogDetail.logData)
  return _internal_logdata();
}
inline void LogDetail::set_logdata(const std::string& value) {
  _internal_set_logdata(value);
  // @@protoc_insertion_point(field_set:LogDetail.logData)
}
inline std::string* LogDetail::mutable_logdata() {
  // @@protoc_insertion_point(field_mutable:LogDetail.logData)
  return _internal_mutable_logdata();
}
inline const std::string& LogDetail::_internal_logdata() const {
  return logdata_.GetNoArena();
}
inline void LogDetail::_internal_set_logdata(const std::string& value) {
  
  logdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LogDetail::set_logdata(std::string&& value) {
  
  logdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LogDetail.logData)
}
inline void LogDetail::set_logdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LogDetail.logData)
}
inline void LogDetail::set_logdata(const char* value, size_t size) {
  
  logdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LogDetail.logData)
}
inline std::string* LogDetail::_internal_mutable_logdata() {
  
  return logdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LogDetail::release_logdata() {
  // @@protoc_insertion_point(field_release:LogDetail.logData)
  
  return logdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LogDetail::set_allocated_logdata(std::string* logdata) {
  if (logdata != nullptr) {
    
  } else {
    
  }
  logdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logdata);
  // @@protoc_insertion_point(field_set_allocated:LogDetail.logData)
}

// -------------------------------------------------------------------

// LogVector

// repeated .LogDetail log = 1;
inline int LogVector::_internal_log_size() const {
  return log_.size();
}
inline int LogVector::log_size() const {
  return _internal_log_size();
}
inline void LogVector::clear_log() {
  log_.Clear();
}
inline ::LogDetail* LogVector::mutable_log(int index) {
  // @@protoc_insertion_point(field_mutable:LogVector.log)
  return log_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogDetail >*
LogVector::mutable_log() {
  // @@protoc_insertion_point(field_mutable_list:LogVector.log)
  return &log_;
}
inline const ::LogDetail& LogVector::_internal_log(int index) const {
  return log_.Get(index);
}
inline const ::LogDetail& LogVector::log(int index) const {
  // @@protoc_insertion_point(field_get:LogVector.log)
  return _internal_log(index);
}
inline ::LogDetail* LogVector::_internal_add_log() {
  return log_.Add();
}
inline ::LogDetail* LogVector::add_log() {
  // @@protoc_insertion_point(field_add:LogVector.log)
  return _internal_add_log();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LogDetail >&
LogVector::log() const {
  // @@protoc_insertion_point(field_list:LogVector.log)
  return log_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_czmp_5flog_5fprotocol_2eproto
