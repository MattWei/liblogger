// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: czmp_log_protocol.proto

#include "czmp_log_protocol.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_czmp_5flog_5fprotocol_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogDetail_czmp_5flog_5fprotocol_2eproto;
class LogGetterParamsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogGetterParams> _instance;
} _LogGetterParams_default_instance_;
class LogDetailDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogDetail> _instance;
} _LogDetail_default_instance_;
class LogVectorDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LogVector> _instance;
} _LogVector_default_instance_;
static void InitDefaultsscc_info_LogDetail_czmp_5flog_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogDetail_default_instance_;
    new (ptr) ::LogDetail();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogDetail::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogDetail_czmp_5flog_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogDetail_czmp_5flog_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_LogGetterParams_czmp_5flog_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogGetterParams_default_instance_;
    new (ptr) ::LogGetterParams();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogGetterParams::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LogGetterParams_czmp_5flog_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LogGetterParams_czmp_5flog_5fprotocol_2eproto}, {}};

static void InitDefaultsscc_info_LogVector_czmp_5flog_5fprotocol_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LogVector_default_instance_;
    new (ptr) ::LogVector();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LogVector::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LogVector_czmp_5flog_5fprotocol_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LogVector_czmp_5flog_5fprotocol_2eproto}, {
      &scc_info_LogDetail_czmp_5flog_5fprotocol_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_czmp_5flog_5fprotocol_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_czmp_5flog_5fprotocol_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_czmp_5flog_5fprotocol_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_czmp_5flog_5fprotocol_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogGetterParams, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogGetterParams, startlevel_),
  PROTOBUF_FIELD_OFFSET(::LogGetterParams, datestart_),
  PROTOBUF_FIELD_OFFSET(::LogGetterParams, dateend_),
  PROTOBUF_FIELD_OFFSET(::LogGetterParams, maxrows_),
  PROTOBUF_FIELD_OFFSET(::LogGetterParams, fliter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogDetail, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogDetail, logtime_),
  PROTOBUF_FIELD_OFFSET(::LogDetail, loglevel_),
  PROTOBUF_FIELD_OFFSET(::LogDetail, logmodule_),
  PROTOBUF_FIELD_OFFSET(::LogDetail, logmsg_),
  PROTOBUF_FIELD_OFFSET(::LogDetail, logdata_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LogVector, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::LogVector, log_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::LogGetterParams)},
  { 10, -1, sizeof(::LogDetail)},
  { 20, -1, sizeof(::LogVector)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogGetterParams_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogDetail_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LogVector_default_instance_),
};

const char descriptor_table_protodef_czmp_5flog_5fprotocol_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\027czmp_log_protocol.proto\"j\n\017LogGetterPa"
  "rams\022\022\n\nstartLevel\030\001 \001(\r\022\021\n\tdateStart\030\002 "
  "\001(\t\022\017\n\007dateEnd\030\003 \001(\t\022\017\n\007maxRows\030\004 \001(\r\022\016\n"
  "\006fliter\030\005 \001(\014\"b\n\tLogDetail\022\017\n\007logTime\030\001 "
  "\001(\t\022\020\n\010logLevel\030\002 \001(\r\022\021\n\tlogModule\030\003 \001(\t"
  "\022\016\n\006logMsg\030\004 \001(\014\022\017\n\007logData\030\005 \001(\t\"$\n\tLog"
  "Vector\022\027\n\003log\030\001 \003(\0132\n.LogDetailb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_czmp_5flog_5fprotocol_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_czmp_5flog_5fprotocol_2eproto_sccs[3] = {
  &scc_info_LogDetail_czmp_5flog_5fprotocol_2eproto.base,
  &scc_info_LogGetterParams_czmp_5flog_5fprotocol_2eproto.base,
  &scc_info_LogVector_czmp_5flog_5fprotocol_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_czmp_5flog_5fprotocol_2eproto_once;
static bool descriptor_table_czmp_5flog_5fprotocol_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_czmp_5flog_5fprotocol_2eproto = {
  &descriptor_table_czmp_5flog_5fprotocol_2eproto_initialized, descriptor_table_protodef_czmp_5flog_5fprotocol_2eproto, "czmp_log_protocol.proto", 279,
  &descriptor_table_czmp_5flog_5fprotocol_2eproto_once, descriptor_table_czmp_5flog_5fprotocol_2eproto_sccs, descriptor_table_czmp_5flog_5fprotocol_2eproto_deps, 3, 0,
  schemas, file_default_instances, TableStruct_czmp_5flog_5fprotocol_2eproto::offsets,
  file_level_metadata_czmp_5flog_5fprotocol_2eproto, 3, file_level_enum_descriptors_czmp_5flog_5fprotocol_2eproto, file_level_service_descriptors_czmp_5flog_5fprotocol_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_czmp_5flog_5fprotocol_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_czmp_5flog_5fprotocol_2eproto), true);

// ===================================================================

void LogGetterParams::InitAsDefaultInstance() {
}
class LogGetterParams::_Internal {
 public:
};

LogGetterParams::LogGetterParams()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogGetterParams)
}
LogGetterParams::LogGetterParams(const LogGetterParams& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  datestart_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_datestart().empty()) {
    datestart_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datestart_);
  }
  dateend_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dateend().empty()) {
    dateend_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dateend_);
  }
  fliter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_fliter().empty()) {
    fliter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fliter_);
  }
  ::memcpy(&startlevel_, &from.startlevel_,
    static_cast<size_t>(reinterpret_cast<char*>(&maxrows_) -
    reinterpret_cast<char*>(&startlevel_)) + sizeof(maxrows_));
  // @@protoc_insertion_point(copy_constructor:LogGetterParams)
}

void LogGetterParams::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogGetterParams_czmp_5flog_5fprotocol_2eproto.base);
  datestart_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dateend_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fliter_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&startlevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxrows_) -
      reinterpret_cast<char*>(&startlevel_)) + sizeof(maxrows_));
}

LogGetterParams::~LogGetterParams() {
  // @@protoc_insertion_point(destructor:LogGetterParams)
  SharedDtor();
}

void LogGetterParams::SharedDtor() {
  datestart_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dateend_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fliter_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogGetterParams::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogGetterParams& LogGetterParams::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogGetterParams_czmp_5flog_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void LogGetterParams::Clear() {
// @@protoc_insertion_point(message_clear_start:LogGetterParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datestart_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dateend_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  fliter_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&startlevel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&maxrows_) -
      reinterpret_cast<char*>(&startlevel_)) + sizeof(maxrows_));
  _internal_metadata_.Clear();
}

const char* LogGetterParams::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 startLevel = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          startlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dateStart = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_datestart(), ptr, ctx, "LogGetterParams.dateStart");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string dateEnd = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_dateend(), ptr, ctx, "LogGetterParams.dateEnd");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 maxRows = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          maxrows_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes fliter = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_fliter(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogGetterParams::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogGetterParams)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 startLevel = 1;
  if (this->startlevel() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_startlevel(), target);
  }

  // string dateStart = 2;
  if (this->datestart().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_datestart().data(), static_cast<int>(this->_internal_datestart().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogGetterParams.dateStart");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_datestart(), target);
  }

  // string dateEnd = 3;
  if (this->dateend().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dateend().data(), static_cast<int>(this->_internal_dateend().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogGetterParams.dateEnd");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_dateend(), target);
  }

  // uint32 maxRows = 4;
  if (this->maxrows() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_maxrows(), target);
  }

  // bytes fliter = 5;
  if (this->fliter().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_fliter(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogGetterParams)
  return target;
}

size_t LogGetterParams::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogGetterParams)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dateStart = 2;
  if (this->datestart().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datestart());
  }

  // string dateEnd = 3;
  if (this->dateend().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dateend());
  }

  // bytes fliter = 5;
  if (this->fliter().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_fliter());
  }

  // uint32 startLevel = 1;
  if (this->startlevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_startlevel());
  }

  // uint32 maxRows = 4;
  if (this->maxrows() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_maxrows());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogGetterParams::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogGetterParams)
  GOOGLE_DCHECK_NE(&from, this);
  const LogGetterParams* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogGetterParams>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogGetterParams)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogGetterParams)
    MergeFrom(*source);
  }
}

void LogGetterParams::MergeFrom(const LogGetterParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogGetterParams)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.datestart().size() > 0) {

    datestart_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.datestart_);
  }
  if (from.dateend().size() > 0) {

    dateend_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dateend_);
  }
  if (from.fliter().size() > 0) {

    fliter_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.fliter_);
  }
  if (from.startlevel() != 0) {
    _internal_set_startlevel(from._internal_startlevel());
  }
  if (from.maxrows() != 0) {
    _internal_set_maxrows(from._internal_maxrows());
  }
}

void LogGetterParams::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogGetterParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogGetterParams::CopyFrom(const LogGetterParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogGetterParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogGetterParams::IsInitialized() const {
  return true;
}

void LogGetterParams::InternalSwap(LogGetterParams* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  datestart_.Swap(&other->datestart_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dateend_.Swap(&other->dateend_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  fliter_.Swap(&other->fliter_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(startlevel_, other->startlevel_);
  swap(maxrows_, other->maxrows_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogGetterParams::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogDetail::InitAsDefaultInstance() {
}
class LogDetail::_Internal {
 public:
};

LogDetail::LogDetail()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogDetail)
}
LogDetail::LogDetail(const LogDetail& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  logtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logtime().empty()) {
    logtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logtime_);
  }
  logmodule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logmodule().empty()) {
    logmodule_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logmodule_);
  }
  logmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logmsg().empty()) {
    logmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logmsg_);
  }
  logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_logdata().empty()) {
    logdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logdata_);
  }
  loglevel_ = from.loglevel_;
  // @@protoc_insertion_point(copy_constructor:LogDetail)
}

void LogDetail::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogDetail_czmp_5flog_5fprotocol_2eproto.base);
  logtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logmodule_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logmsg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loglevel_ = 0u;
}

LogDetail::~LogDetail() {
  // @@protoc_insertion_point(destructor:LogDetail)
  SharedDtor();
}

void LogDetail::SharedDtor() {
  logtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logmodule_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logmsg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LogDetail::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogDetail& LogDetail::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogDetail_czmp_5flog_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void LogDetail::Clear() {
// @@protoc_insertion_point(message_clear_start:LogDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  logtime_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logmodule_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logmsg_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  loglevel_ = 0u;
  _internal_metadata_.Clear();
}

const char* LogDetail::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string logTime = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_logtime(), ptr, ctx, "LogDetail.logTime");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 logLevel = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          loglevel_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logModule = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_logmodule(), ptr, ctx, "LogDetail.logModule");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes logMsg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_logmsg(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string logData = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_logdata(), ptr, ctx, "LogDetail.logData");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogDetail::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogDetail)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string logTime = 1;
  if (this->logtime().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logtime().data(), static_cast<int>(this->_internal_logtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogDetail.logTime");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_logtime(), target);
  }

  // uint32 logLevel = 2;
  if (this->loglevel() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_loglevel(), target);
  }

  // string logModule = 3;
  if (this->logmodule().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logmodule().data(), static_cast<int>(this->_internal_logmodule().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogDetail.logModule");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_logmodule(), target);
  }

  // bytes logMsg = 4;
  if (this->logmsg().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_logmsg(), target);
  }

  // string logData = 5;
  if (this->logdata().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_logdata().data(), static_cast<int>(this->_internal_logdata().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "LogDetail.logData");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_logdata(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogDetail)
  return target;
}

size_t LogDetail::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogDetail)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string logTime = 1;
  if (this->logtime().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logtime());
  }

  // string logModule = 3;
  if (this->logmodule().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logmodule());
  }

  // bytes logMsg = 4;
  if (this->logmsg().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_logmsg());
  }

  // string logData = 5;
  if (this->logdata().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_logdata());
  }

  // uint32 logLevel = 2;
  if (this->loglevel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loglevel());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogDetail::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogDetail)
  GOOGLE_DCHECK_NE(&from, this);
  const LogDetail* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogDetail>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogDetail)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogDetail)
    MergeFrom(*source);
  }
}

void LogDetail::MergeFrom(const LogDetail& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogDetail)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.logtime().size() > 0) {

    logtime_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logtime_);
  }
  if (from.logmodule().size() > 0) {

    logmodule_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logmodule_);
  }
  if (from.logmsg().size() > 0) {

    logmsg_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logmsg_);
  }
  if (from.logdata().size() > 0) {

    logdata_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.logdata_);
  }
  if (from.loglevel() != 0) {
    _internal_set_loglevel(from._internal_loglevel());
  }
}

void LogDetail::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogDetail::CopyFrom(const LogDetail& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogDetail)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogDetail::IsInitialized() const {
  return true;
}

void LogDetail::InternalSwap(LogDetail* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  logtime_.Swap(&other->logtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logmodule_.Swap(&other->logmodule_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logmsg_.Swap(&other->logmsg_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  logdata_.Swap(&other->logdata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(loglevel_, other->loglevel_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogDetail::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LogVector::InitAsDefaultInstance() {
}
class LogVector::_Internal {
 public:
};

LogVector::LogVector()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LogVector)
}
LogVector::LogVector(const LogVector& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      log_(from.log_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LogVector)
}

void LogVector::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LogVector_czmp_5flog_5fprotocol_2eproto.base);
}

LogVector::~LogVector() {
  // @@protoc_insertion_point(destructor:LogVector)
  SharedDtor();
}

void LogVector::SharedDtor() {
}

void LogVector::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LogVector& LogVector::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LogVector_czmp_5flog_5fprotocol_2eproto.base);
  return *internal_default_instance();
}


void LogVector::Clear() {
// @@protoc_insertion_point(message_clear_start:LogVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  log_.Clear();
  _internal_metadata_.Clear();
}

const char* LogVector::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .LogDetail log = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_log(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LogVector::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LogVector)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .LogDetail log = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_log_size()); i < n; i++) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(1, this->_internal_log(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LogVector)
  return target;
}

size_t LogVector::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LogVector)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .LogDetail log = 1;
  total_size += 1UL * this->_internal_log_size();
  for (const auto& msg : this->log_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LogVector::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LogVector)
  GOOGLE_DCHECK_NE(&from, this);
  const LogVector* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LogVector>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LogVector)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LogVector)
    MergeFrom(*source);
  }
}

void LogVector::MergeFrom(const LogVector& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LogVector)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  log_.MergeFrom(from.log_);
}

void LogVector::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LogVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LogVector::CopyFrom(const LogVector& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LogVector)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogVector::IsInitialized() const {
  return true;
}

void LogVector::InternalSwap(LogVector* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  log_.InternalSwap(&other->log_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LogVector::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::LogGetterParams* Arena::CreateMaybeMessage< ::LogGetterParams >(Arena* arena) {
  return Arena::CreateInternal< ::LogGetterParams >(arena);
}
template<> PROTOBUF_NOINLINE ::LogDetail* Arena::CreateMaybeMessage< ::LogDetail >(Arena* arena) {
  return Arena::CreateInternal< ::LogDetail >(arena);
}
template<> PROTOBUF_NOINLINE ::LogVector* Arena::CreateMaybeMessage< ::LogVector >(Arena* arena) {
  return Arena::CreateInternal< ::LogVector >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
